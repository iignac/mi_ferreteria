@model IEnumerable<mi_ferreteria.Models.Producto>
@{
    ViewData["Title"] = "Productos";
}

<h2 class="mb-3">Productos</h2>
@{
    var stocks = ViewBag.Stocks as System.Collections.Generic.IDictionary<long, long>;
}
@* stocks: diccionario (ProductoId -> Stock actual) calculado en el controlador *@
@{
    int page = ViewBag.Page is int ? (int)ViewBag.Page : 1;
    int totalPages = ViewBag.TotalPages is int ? (int)ViewBag.TotalPages : 1;
}
@* page y totalPages llegan desde el controlador para soportar la paginación *@
@if (ViewBag.LoadError == true)
{
    <div class="alert alert-danger">No pudimos cargar los productos. Por favor, intenta nuevamente más tarde.</div>
}

<div class="text-center mb-4">
    @* Enlace de alta: preserva la página actual para volver luego *@
    <a asp-action="Create" asp-route-page="@(page)" class="btn btn-primary btn-lg btn-cta">Crear producto</a>
 </div>

@if (Model == null || !Model.Any())
{
    <div class="alert alert-info">No hay productos cargados.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered align-middle table-products">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>SKU</th>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Ubicación</th>
                    <th>Stock</th>
                    <th>Activo</th>
                    <th class="text-end">Acciones</th>
                </tr>
            </thead>
            <tbody>
            @* Renderiza filas de productos. Cada fila es "clickeable" para ir a Edit *@
            @foreach (var p in Model)
            {
                <tr class="clickable-row" data-href="@Url.Action("Edit","Producto", new { id = p.Id, page = page })">
                    <td>@p.Id</td>
                    <td>@p.Sku</td>
                    <td>@p.Nombre</td>
                    <td>$ @p.PrecioVentaActual</td>
                    <td>@(string.IsNullOrWhiteSpace(p.UbicacionCodigo) ? "-" : p.UbicacionCodigo)</td>
                    <td>@(stocks != null && stocks.ContainsKey(p.Id) ? stocks[p.Id] : 0)</td>
                    <td>
                        @if (p.Activo) { <span class="badge bg-success">Sí</span>; } else { <span class="badge bg-secondary">No</span>; }
                    </td>
                    <td class="text-end">
                        <a asp-action="Edit" asp-route-id="@p.Id" asp-route-page="@(page)" class="btn btn-sm btn-outline-primary">Editar</a>
                        <a asp-controller="StockProducto" asp-action="Manage" asp-route-id="@p.Id" class="btn btn-sm btn-outline-secondary">Stock</a>
                        <a asp-action="Delete" asp-route-id="@p.Id" asp-route-page="@(page)" class="btn btn-sm btn-outline-danger btn-delete-prod">Eliminar</a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    @* Controles de paginación (Bootstrap): Anterior, números y Siguiente *@
    @if (totalPages > 1)
    {
        var start = Math.Max(1, page - 2);
        var end = Math.Min(totalPages, page + 2);
        <nav aria-label="Paginación de productos" class="mt-3">
            <ul class="pagination justify-content-center">
                <li class="page-item @(page <= 1 ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(page - 1)">Anterior</a>
                </li>
                @for (var i = start; i <= end; i++)
                {
                    <li class="page-item @(i == page ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i">@i</a>
                    </li>
                }
                <li class="page-item @(page >= totalPages ? "disabled" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@(page + 1)">Siguiente</a>
                </li>
            </ul>
        </nav>
    }
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function(){
  // Confirmación de eliminación desde el listado
  document.querySelectorAll('.btn-delete-prod').forEach(function(a){
    a.addEventListener('click', function(e){
    if(!confirm('¿Seguro que deseas eliminar este producto?')){
        e.preventDefault();
      }
    });
  });

  // Click en fila -> navega a Edit (excepto si haces click en botones/enlaces dentro de la fila)
  document.querySelectorAll('table.table-products tbody tr.clickable-row').forEach(function(tr){
    tr.addEventListener('click', function(e){
      var t = e.target;
      if (t && t.closest && (t.closest('a') || t.closest('button'))) return;
      var href = this.getAttribute('data-href');
      if (href) window.location.href = href;
    });
  });
});
</script>
}








