@model mi_ferreteria.ViewModels.ProductoFormViewModel
@{
    ViewData["Title"] = "Editar Producto";
}
<h2>Editar Producto</h2>
<div class="text-danger">@Html.ValidationSummary()</div>
<form asp-action="Edit" method="post">
    <input type="hidden" name="page" value="@(ViewBag.ReturnPage ?? 1)" />
    <input type="hidden" asp-for="Id" />
    <div class="row g-3">
        <div class="col-md-4">
            <label class="form-label">SKU</label>
            <input asp-for="Sku" class="form-control" />
            <span asp-validation-for="Sku" class="text-danger"></span>
        </div>
        <div class="col-md-8">
            <label class="form-label">Nombre</label>
            <input asp-for="Nombre" class="form-control" />
            <span asp-validation-for="Nombre" class="text-danger"></span>
        </div>
        <div class="col-12">
            <label class="form-label">Descripción</label>
            <textarea asp-for="Descripcion" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Descripcion" class="text-danger"></span>
        </div>
        <div class="col-12">
            <label class="form-label d-flex align-items-center justify-content-between">
                <span>Códigos de barra</span>
                <button type="button" class="btn btn-sm btn-outline-primary" id="btnAddBarcode">+ Agregar</button>
            </label>
            <div id="barcodeList" class="vstack gap-2"></div>
            <div id="barcodeMsg" class="form-text text-danger d-none">No se pueden agregar más códigos (máximo 5).</div>
        </div>
        <div class="col-12">
            <label class="form-label">Categorías</label>
            <div class="d-flex gap-2 mb-2 align-items-center">
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">Categorías</button>
                    <ul class="dropdown-menu p-2" style="max-height: 260px; overflow:auto; min-width: 280px;">
                        <li class="px-1 mb-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Filtrar categorías..." id="catFilterEdit">
                        </li>
                        @foreach (var c in Model.Categorias)
                        {
                            <li><a href="#" class="dropdown-item cat-pick" data-id="@c.Value" data-name="@c.Text">@c.Text</a></li>
                        }
                    </ul>
                </div>
                <small class="text-muted">Hasta 3 categorías.</small>
            </div>
            <div id="catSelectedEdit" class="d-flex flex-wrap gap-2 cat-box"></div>
            <div id="catInputsEdit"></div>
        </div>
        <div class="col-md-4">
            <label class="form-label">Precio</label>
            <input asp-for="PrecioVentaActual" class="form-control" type="number" step="0.01" min="0" />
            <span asp-validation-for="PrecioVentaActual" class="text-danger"></span>
        </div>
        <div class="col-md-4">
            <label class="form-label">Stock mínimo</label>
            <input asp-for="StockMinimo" class="form-control" type="number" min="0" />
            <span asp-validation-for="StockMinimo" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label class="form-label">Código ubicación (ej: A1)</label>
            <input asp-for="UbicacionCodigo" class="form-control" />
            <span asp-validation-for="UbicacionCodigo" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label class="form-label d-block">Estado</label>
            <div class="form-check form-switch">
                <input class="form-check-input" asp-for="Activo" type="checkbox" role="switch" id="prodActivoEdit" />
                <label class="form-check-label" for="prodActivoEdit">Activo</label>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-center gap-2 mt-4">
        <button type="submit" class="btn btn-primary px-5">Guardar</button>
        <a asp-action="Index" asp-route-page="@(ViewBag.ReturnPage ?? 1)" class="btn btn-outline-secondary px-5 btn-cancel-leave">Volver</a>
    </div>
</form>

@section Scripts {
<script>
(function(){
  let isDirty=false; const form=document.querySelector('form');
  if(!form) return; form.addEventListener('input',()=>isDirty=true,{capture:true});
  form.addEventListener('change',()=>isDirty=true,{capture:true});
  form.addEventListener('submit',(e)=>{
  const inputs = Array.from(document.querySelectorAll('#barcodeList .barcode-item input'));
  const vals = inputs.map(i=>i.value.trim()).filter(v=>v.length>0);
  const hasEmpty = inputs.some(i=>!i.value.trim());
  const seen = new Set(); const dup = new Set();
  vals.forEach(v=>{ const k=v.toLowerCase(); if(seen.has(k)) dup.add(k); else seen.add(k); });
  if(hasEmpty){ e.preventDefault(); alert('No se permiten codigos de barra vacios.'); return; }
  if(dup.size>0){ e.preventDefault(); alert('Hay codigos de barra repetidos.'); return; }
  isDirty=false;
});
  window.addEventListener('beforeunload',function(e){ if(!isDirty) return; e.preventDefault(); e.returnValue=''; });
  document.querySelectorAll('.btn-cancel-leave').forEach(a=>a.addEventListener('click',function(e){ if(isDirty && !confirm('Hay cambios sin guardar. Si vuelves, se perderán. ¿Deseas salir igualmente?')){ e.preventDefault(); }}));
  // Barcodes dynamic inputs (prepopulate)
  const list = document.getElementById('barcodeList');
  const btnAdd = document.getElementById('btnAddBarcode');
  const msg = document.getElementById('barcodeMsg');
  const max = 5;
  const existing = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Barcodes ?? new List<string>()));
  // Función: agrega una fila (input de código + botón eliminar) y reenumera cuando se borra
  const addInput = (val='')=>{
    const count = list.querySelectorAll('.barcode-item').length;
    if(count >= max){ msg.classList.remove('d-none'); return; }
    msg.classList.add('d-none');
    const idx = count;
    const row = document.createElement('div');
    row.className = 'barcode-item input-group';
    const input = document.createElement('input');
    input.name = `Barcodes[${idx}]`;
    input.className = 'form-control';
    input.placeholder = 'Código de barra';
    input.value = val || '';
    const btn = document.createElement('button');
    btn.type = 'button'; btn.className = 'btn btn-outline-danger'; btn.textContent = '-';
    btn.addEventListener('click', ()=>{ row.remove(); renumber(); });
    row.appendChild(input); row.appendChild(btn);
    list.appendChild(row);
  };
  // Función: reenumerar nombres Barcodes[i] después de altas/bajas
  const renumber = ()=>{
    const items = list.querySelectorAll('.barcode-item input');
    items.forEach((inp, i)=>{ inp.name = `Barcodes[${i}]`; });
    if(items.length < max) msg.classList.add('d-none');
  };
  btnAdd?.addEventListener('click', ()=> { const hasEmpty = Array.from(document.querySelectorAll('#barcodeList .barcode-item input')).some(i=>!i.value.trim()); if(hasEmpty){ alert('Complete el codigo vacio antes de agregar otro.'); return; } addInput(); });
  if(existing && existing.length){ existing.slice(0, max).forEach(v=> addInput(v)); }
  else { addInput(); }

  // Selección de categorías vía botón (hasta 3)
  (function(){
    const container = document.getElementById('catSelectedEdit');
    const inputs = document.getElementById('catInputsEdit');
    const picks = document.querySelectorAll('.cat-pick');
    const filter = document.getElementById('catFilterEdit');
    let ids = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.CategoriaIds ?? new List<long>()));

    function renumber() {
      inputs.innerHTML = '';
      ids.forEach((id, i) => {
        const h = document.createElement('input');
        h.type = 'hidden';
        h.name = `CategoriaIds[${i}]`;
        h.value = id;
        inputs.appendChild(h);
      });
    }
    function renderChips() {
      container.innerHTML = '';
      ids.forEach(id => {
        const item = Array.from(picks).find(a => a.dataset.id === String(id));
        const name = item ? item.dataset.name : id;
        const chip = document.createElement('span');
        chip.className = 'cat-chip badge bg-primary-subtle text-primary border border-primary';
        chip.innerHTML = `${name} <button type="button" class="btn-close btn-close-sm ms-1" aria-label="Quitar"></button>`;
        chip.querySelector('button')?.addEventListener('click', () => { ids = ids.filter(x => String(x) !== String(id)); renumber(); renderChips(); });
        container.appendChild(chip);
      });
    }
    picks.forEach(a => {
      a.addEventListener('click', function(e){
        e.preventDefault();
        const id = this.dataset.id;
        if (!id) return;
        if (ids.map(String).includes(String(id))) return; // ya seleccionado
        if (ids.length >= 3) { alert('Solo puedes seleccionar hasta 3 categorías.'); return; }
        ids.push(id);
        renumber();
        renderChips();
      });
    });
    filter?.addEventListener('input', function(){
      const q = this.value.toLowerCase();
      picks.forEach(a => { a.parentElement.style.display = a.dataset.name.toLowerCase().includes(q) ? '' : 'none'; });
    });
    // Inicializar con seleccionadas
    renumber();
    renderChips();
  })();
})();
</script>
}







