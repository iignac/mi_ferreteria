@model IEnumerable<mi_ferreteria.Models.Categoria>
@{
    ViewData["Title"] = "Categorías";
    string q = ViewBag.Query as string ?? string.Empty;
    string sort = ViewBag.Sort as string ?? "id_asc";
    string NextSort(string col) {
        return col switch {
            "id" => sort == "id_asc" ? "id_desc" : "id_asc",
            "nombre" => sort == "nombre_asc" ? "nombre_desc" : "nombre_asc",
            "activo" => sort == "activo_asc" ? "activo_desc" : "activo_asc",
            _ => "id_asc"
        };
    }
    string Arrow(string col) {
        if (col == "id" && sort.StartsWith("id_")) return sort.EndsWith("asc") ? "&uarr;" : "&darr;";
        if (col == "nombre" && sort.StartsWith("nombre_")) return sort.EndsWith("asc") ? "&uarr;" : "&darr;";
        if (col == "activo" && sort.StartsWith("activo_")) return sort.EndsWith("asc") ? "&uarr;" : "&darr;";
        return "&#8597;";
    }
    var catNames = ViewBag.CategoriaNames as System.Collections.Generic.IDictionary<long, string>;
}
<h2 class="mb-3">Categorías</h2>
<form method="get" asp-action="Index" class="mb-3">
    <div class="input-group">
        <input type="search" name="q" value="@q" class="form-control" placeholder="Buscar por nombre de categoría" aria-label="Buscar categorías" />
        <input type="hidden" name="page" value="1" />
        <input type="hidden" name="sort" value="@sort" />
        <button class="btn btn-primary" type="submit">Buscar</button>
        @if (!string.IsNullOrWhiteSpace(q))
        {
            <a class="btn btn-outline-secondary" asp-action="Index">Limpiar</a>
        }
    </div>
</form>
<div class="text-center mb-4">
    <a asp-action="Create" class="btn btn-primary btn-lg btn-cta">Crear categoría</a>
</div>
@if (Model == null || !Model.Any())
{
    <div class="alert alert-info">No hay categorías.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered align-middle table-products">
            <thead>
                <tr>
                    <th><a class="text-decoration-none" asp-action="Index" asp-route-q="@q" asp-route-sort='@NextSort("id")' asp-route-page="1">ID @Html.Raw(Arrow("id"))</a></th>
                    <th><a class="text-decoration-none" asp-action="Index" asp-route-q="@q" asp-route-sort='@NextSort("nombre")' asp-route-page="1">Nombre @Html.Raw(Arrow("nombre"))</a></th>
                    <th><a class="text-decoration-none" asp-action="Index" asp-route-q="@q" asp-route-sort='@NextSort("activo")' asp-route-page="1">Estado @Html.Raw(Arrow("activo"))</a></th>
                    <th>Padre</th>
                    <th class="text-end">Acciones</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var c in Model)
            {
                <tr class="clickable-row" data-href="@Url.Action("Edit","Categoria", new { id = c.Id })">
                    <td>@c.Id</td>
                    <td>@c.Nombre</td>
                    <td class="text-center">
                        @if (c.Activo)
                        {
                            <span class="badge bg-success">Activo</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Inactivo</span>
                        }
                    </td>
                    <td>
                        @if (c.IdPadre.HasValue && catNames != null && catNames.ContainsKey(c.IdPadre.Value))
                        {
                            @catNames[c.IdPadre.Value]
                        }
                        else
                        {
                            @:(-)
                        }
                    </td>
                    <td class="text-end">
                        <a asp-action="Edit" asp-route-id="@c.Id" class="btn btn-sm btn-outline-primary">Editar</a>
                        @if (c.Activo)
                        {
                            <a asp-action="Delete" asp-route-id="@c.Id" class="btn btn-sm btn-outline-warning">Desactivar</a>
                        }
                        else
                        {
                            <form asp-action="Activate" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@c.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-success">Activar</button>
                            </form>
                        }
                        <form asp-action="HardDelete" method="post" class="d-inline">
                            <input type="hidden" name="id" value="@c.Id" />
                            <button type="submit" class="btn btn-sm btn-outline-danger btn-hard-delete">Eliminar</button>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
@{
    int page = ViewBag.Page is int ? (int)ViewBag.Page : 1;
    int totalPages = ViewBag.TotalPages is int ? (int)ViewBag.TotalPages : 1;
}
@if (totalPages > 1)
{
    var start = System.Math.Max(1, page - 2);
    var end = System.Math.Min(totalPages, page + 2);
    <nav aria-label="Paginación de categorías" class="mt-3">
        <ul class="pagination justify-content-center">
            <li class="page-item @(page <= 1 ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(page - 1)" asp-route-q="@q" asp-route-sort="@sort">Anterior</a>
            </li>
            @for (var i = start; i <= end; i++)
            {
                <li class="page-item @(i == page ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-q="@q" asp-route-sort="@sort">@i</a>
                </li>
            }
            <li class="page-item @(page >= totalPages ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(page + 1)" asp-route-q="@q" asp-route-sort="@sort">Siguiente</a>
            </li>
        </ul>
    </nav>
}
@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function(){
      document.querySelectorAll('table.table-products tbody tr.clickable-row').forEach(function(tr){
        tr.addEventListener('click', function(e){
          var t = e.target;
          if (t && t.closest && (t.closest('a') || t.closest('button'))) return;
          var href = this.getAttribute('data-href');
          if (href) window.location.href = href;
        });
      });
      document.querySelectorAll('.btn-hard-delete').forEach(function(btn){
        btn.addEventListener('click', function(e){
          if(!confirm('¿Eliminar físicamente esta categoría? Esta acción no se puede deshacer.')){
            e.preventDefault();
          }
        });
      });
    });
</script>
}
